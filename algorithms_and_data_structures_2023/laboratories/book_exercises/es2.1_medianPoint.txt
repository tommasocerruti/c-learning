#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct{
    char id[4];
    float x;
    float y;
    float z;
    float dist;
} coord_t;

int main(int argc, char *argv[]){
    coord_t *coords;
    int i, j, n, min=0;
    float dx, dy, dz;
    FILE *fp;
    if ((fp=fopen(argv[1],"r")==NULL)){
        fprintf(stderr,"File opening error");
        return EXIT_FAILURE;
    }
    if((fscanf(fp,"%d",&n)==EOF)||(n<=0)){
        fprintf(stderr,"File format error");
        return EXIT_FAILURE;
    }
    coords=malloc(n*sizeof(coord_t));
    if (coords==NULL){
        fprintf(stderr,"Memory allocation error");
        return EXIT_FAILURE;
    }
    for (i=0;i<n;i++){
        fscanf(fp,"%s %f %f %f",coords[i].id,&coords[i].x,&coords[i].y,&coords[i].z);
        coords[i].dist=0;
    }
    for (i=0;i<n;i++){// for each coord
        for (j=0;j<n;j++){// check the distance to all the others
            dx=powf(coords[i].x-coords[j].x,2);
            dy=powf(coords[i].y-coords[j].y,2);
            dz=powf(coords[i].z-coords[j].z,2);
            coords[i].dist+=sqrt(dx+dy+dz);
        }
        if (coords[i].dist<coords[min].dist)
            min=i;
    }
    fprintf(stdout, "Median point: %s %.2f %.2f %.2f",coords[min].id,coords[min].x,coords[min].y,coords[min].z);
    free(coords);
    return EXIT_SUCCESS;
}

// 1. Always free dynamic allocation
// 2. No need for reference if a struct field is a string