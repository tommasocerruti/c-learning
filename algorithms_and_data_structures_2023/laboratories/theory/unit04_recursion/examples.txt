int find_max(int *arr, int l, int r){ //finding the max of an array arr
	int c, m1, m2;
	if (l>=r)
		return v[l];
	c=(r+l)/2;
	m1=max(arr,l,c);
	m2=max(arr,c+1,r);
	if(m1>=m2)
		return m1;
	else
		return m2;}

int fact(int n){ //returning the factorial of n
	if (n==0)
		return 1;

	return (fact(n-1)*n);
	// or
	int f;
	f=fact(n-1);
	return (f*n);
}



int fib(int n){ //returning the fibonacci sequence until n
	int f1, f2;
	if (n==0||n==1)
		return n;
	f1=fib(n-1);
	f2=fib(n-2);
	return f1+f2;
}

int binsearch(int arr[], int l, int r, int val){
	int c;
	if (l>r)
		return -1; //not found
	c=(r+l)/2;
	if (val<c)
		binsearch(arr, l, c-1, val);
	if (val>c)
		binsearch(arr, c+1, r, val);
	return c; //found
	// at the end everything is returned back until the first call;
}

void reverse_print(char *str){
	if (str=='\0')
		return;
	reverse_print(str+1);
	fprintf(stdout,"%c",str);
	return;
	// to just print, move fprintf above the function call;
}

void cleanWordRec(char *word){
	if (word[0]=='\0')
		return;
	if (!isalpha(word[0]) && !isdigit(word[0])){
		for (j=0; word[j]!='\0';j++)
			word[j]=word[j+1];
	}
	else {
		cleanWordRec(word+1);
	}
}