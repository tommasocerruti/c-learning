Given one set, simple arrangement of n distinct objects of class n, is a simple permutation
Pn=Dn,n=n*(n-1)*...*(n-n+1)=n!

In practice: When you choose all the possible orderings of a set

Example: How many anagrams of the string ORA, i.e. permutations
P=3!=6 strings

Implementation (data structure):
val=malloc(n*sizeof(int));
//the set
mark=malloc(n*sizeof(int));
//a flag array to check which values are already taken: mark[i]=0->i not taken/mark[i]=1->i taken
sol=malloc(n*sizeof(int));
//solution

Implementation (algorithm):
//just like simple arrangements, but k=n, so it is not taken into consideration
int perm(int *val, int *sol, int *mark, int n, int count, int pos){
    int i;
    if (pos>=n){
        printf("Solution %d: ,count);
        for (i=0;i<n;i++)
            printf("%d ",sol[i]);
        printf("\n");
        return count+1;
    }
    for (i=0;i<n;i++){
        if (mark[i]==0){ //if not marked, i.e. chosen
            mark[i]=1; //mark and choose the next
            sol[pos]=val[i];
            count=perm(val,sol,mark,n,count,pos+1); //recur
            mark[i]=0; //unmark, i.e. traceback
        }
    }
    return count;
}

Example:
ORA
OAR
ROA
RAO
AOR
ARO