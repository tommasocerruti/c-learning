// SOLUTION C

#include <stdio.h>
#include <stdlib.h>

int magic(int **mat,int *u,int n, int lev);

int main(int argc, char **argv) {
    int i;
    int n;
    int **square;
    int *used;

    if(argc != 3) {
        fprintf(stderr, "Not enough parameters");
        exit(-1);
    }

    n = atoi(argv[1]);
    used = (int *) calloc( n*n, sizeof(int) );
    square = (int **)malloc(sizeof(int *) * n);
    for( i=0 ; i<n ; i++) {
        square[i] = (int *)calloc(n,sizeof(int));
    }

    magic(square,used,n,0);

    return 0;
}

void print_mat(int **mat, int n) {
    for(int x =0; x < n; x++ ) {
        for(int y = 0; y < n ; y++ ) {
            printf("%2d ",mat[x][y]);
        }
        printf("\n");
    }
}

int check_mat(int **mat, int n) {
    int sum = -1;
    // checking all rows
    for(int x =0; x < n; x++ ) {
        int parz = 0;
        for(int y = 0; y < n ; y++ ) {
            parz += mat[x][y];
        }
        if( sum == -1 )
            sum = parz;
        if( parz != sum )
            return 0;
    }

    // checking all columns
    for(int y =0; y < n; y++ ) {
        int parz = 0;
        for(int x = 0; x < n ; x++ ) {
            parz += mat[x][y];
        }
        if( parz != sum )
            return 0;
    }

    // checking diagonals
    int parz1 = 0;
    int parz2 = 0;
    for(int x =0; x < n; x++ ) {
        parz1 += mat[x][x];
        parz2 += mat[n-1-x][x];
    }
    if( parz1 != sum || parz2 != sum )
        return 0;
    return 1;
}

int valid(int **mat, int n ) {
    int sum = n*(n*n+1)/2;
    // test all rows
    for( int x=0; x < n; x++ ) {
        int parz = 0;
        int consider = 1;
        for( int y=0; y < n; y++ ) {
            parz += mat[x][y];
            if( mat[x][y] == 0 ) consider = 0;
        }
        if( consider ) {
            if( parz != sum )
                return 0;
        } else {
            if( parz > sum )
                return 0;
        }
    }
    // test all columns
    for( int y=0; y < n; y++ ) {
        int parz = 0;
        int consider = 1;
        for( int x=0; x < n; x++ ) {
            parz += mat[x][y];
            if( mat[x][y] == 0 ) consider = 0;
        }
        if( consider ) {
            if( parz != sum )
                return 0;
        } else {
            if( parz > sum )
                return 0;
        }
    }
    return 1;
}

int magic(int **mat,int *u,int n, int lev) {
    static int count = 0;
    count++;
    if( count % 1000000 == 0 )
        printf("_count = %d_\n",count);

    int i;

    if( lev == n*n ) {
        // check
        if(check_mat(mat,n) ==1 ) {
            printf("Magic! (count: %d)\n",count);
            print_mat(mat, n);
            return 1;
        }
        return 0;
    }

    int x,y;
    // slow way to find a free cell in the matrix
    int skip = 0;
    for(x=0; x < n; x++ ) {
        for(y=0; y < n; y++ ) {
            if( mat[x][y] == 0 ) {
                skip = 1;
                break;
            }
        }
        if( skip ) break;
    }

    // more immediate way
    x = lev / n;
    y = lev % n;

    for( i=0; i< n*n ; i++ ) {
        if( u[i] == 0 ) {
            u[i] = 1;

            mat[x][y] = i+1;
            if( valid(mat,n) ) {
                if (magic(mat, u, n, lev + 1) == 1) {
                    //return 1; // one solution or every solutions
                }
            }
            // backtracking
            mat[x][y] = 0;
            u[i] = 0;
        }
    }
    return 0;
}