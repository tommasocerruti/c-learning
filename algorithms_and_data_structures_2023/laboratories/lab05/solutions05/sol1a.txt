// SOLUTION A

#include <stdio.h>
#include <stdlib.h>

void *my_calloc(int q,int size);
void print_mat(FILE *output, int **mat, int n);
int magic(int **mat,int *u,int n, int lev);

int main(int argc, char **argv) {
    int i;
    int n;
    int **square;
    int *used;

    if(argc != 3) {
        fprintf(stderr, "Not enough parameters");
        exit(-1);
    }

    n = atoi(argv[1]);
    used = (int *)my_calloc( n*n, sizeof(int) );
    square = (int **)my_calloc(n,sizeof(int *));
    for( i=0 ; i<n ; i++) {
        square[i] = (int *)my_calloc(n,sizeof(int));
    }

    if( magic(square,used,n,0) == 1 ) {
        // print to file
        FILE *out = fopen(argv[2],"w");
        print_mat(out,square,n);
        fclose(out);
    }

    for( i=0 ; i<n ; i++) {
        free(square[i]);
    }
    free(square);
    free(used);

    return 0;
}

void *my_calloc(int q,int size) {
    void *mem = calloc(q,size);
    if( mem == NULL ) {
        fprintf(stderr,"Memory allocation error.\n");
        exit(-1);
    }
    return mem;
}

void print_mat(FILE *output, int **mat, int n) {
    for(int x =0; x < n; x++ ) {
        for(int y = 0; y < n ; y++ ) {
            fprintf(output,"%2d ",mat[x][y]);
        }
        fprintf(output,"\n");
    }
}

int check_mat(int **mat, int n) {
    int sum = -1;
    // checking all rows
    for(int x =0; x < n; x++ ) {
        int parz = 0;
        for(int y = 0; y < n ; y++ ) {
            parz += mat[x][y];
        }
        if( sum == -1 )
            sum = parz;
        if( parz != sum )
            return 0;
    }

    // checking all columns
    for(int y =0; y < n; y++ ) {
        int parz = 0;
        for(int x = 0; x < n ; x++ ) {
            parz += mat[x][y];
        }
        if( parz != sum )
            return 0;
    }

    // checking diagonals
    int parz1 = 0;
    int parz2 = 0;
    for(int x =0; x < n; x++ ) {
        parz1 += mat[x][x];
        parz2 += mat[n-1-x][x];
    }
    if( parz1 != sum || parz2 != sum )
        return 0;
    return 1;
}

int magic(int **mat,int *u,int n, int lev) {
    static int count = 0;
    count++;

    int i;

    if( lev == n*n ) {
        // check
        if(check_mat(mat,n) ==1 ) {
            printf("Magic! (count: %d)\n",count);
            print_mat(stdout, mat, n);
            return 1;
        }
        return 0;
    }

    int x,y;
    // slow way to find a free cell in the matrix
    int skip = 0;
    for(x=0; x < n; x++ ) {
        for(y=0; y < n; y++ ) {
            if( mat[x][y] == 0 ) {
                skip = 1;
                break;
            }
        }
        if( skip ) break;
    }

    // more immediate way
    x = lev / n;
    y = lev % n;

    for( i=0; i< n*n ; i++ ) {
        if( u[i] == 0 ) {
            u[i] = 1;

            mat[x][y] = i+1;
            if( magic(mat,u, n, lev+1) == 1 ) {
                return 1; // one solution or every solutions
            }
            // backtracking
            mat[x][y] = 0;
            u[i] = 0;
        }
    }
    return 0;
}