        -:    0:Source:C:/Users/tomma/OneDrive/Desktop/reading_material/course_PROGRAMMING.TECHNIQUES/Labs/L01/E06/main.c
        -:    0:Graph:C:\Users\tomma\OneDrive\Desktop\reading_material\course_PROGRAMMING.TECHNIQUES\Labs\L01\E06\cmake-build-debug-coverage\CMakeFiles\E06.dir\main.c.gcno
        -:    0:Data:C:\Users\tomma\OneDrive\Desktop\reading_material\course_PROGRAMMING.TECHNIQUES\Labs\L01\E06\cmake-build-debug-coverage\CMakeFiles\E06.dir\main.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
function main called 1 returned 100% blocks executed 74%
        1:    3:int main() {
        -:    4:    FILE *fp_read, *fp_write;
        -:    5:    float op1,op2,result;
        -:    6:    char operator;
        1:    7:    if ((fp_read=fopen("../Operations.txt", "r"))==NULL) {
        1:    7-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:    8:        printf("Error opening input file\n");
    %%%%%:    8-block  0
call    0 never executed
    #####:    9:        return 3;
        -:   10:    }
        1:   11:    if ((fp_write=fopen("../Results.txt", "w"))==NULL) {
        1:   11-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   12:        printf("Error opening output file\n");
    %%%%%:   12-block  0
call    0 never executed
    #####:   13:        return 4;
        -:   14:    }
        5:   15:    while (!feof(fp_read)) {
        1:   15-block  0
        5:   15-block  1
call    0 returned 5
branch  1 taken 4
branch  2 taken 1 (fallthrough)
        4:   16:        fscanf(fp_read, "%c %f %f\n", &operator,&op1,&op2);
        4:   16-block  0
call    0 returned 4
        4:   17:        if (operator=='+')
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   18:            result=op1+op2;
        1:   18-block  0
        3:   19:        else if (operator=='-')
        3:   19-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   20:            result=op1-op2;
        1:   20-block  0
        2:   21:        else if (operator=='*')
        2:   21-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   22:            result=op1*op2;
        1:   22-block  0
        1:   23:        else if (operator=='/') {
        1:   23-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   24:            if (op2==0) {
        1:   24-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   25:                printf("ERROR: op2 must be different from zero for divisions");
    %%%%%:   25-block  0
call    0 never executed
    #####:   26:                return 1;
        -:   27:            }
        -:   28:            else
        1:   29:                result=op1/op2;
        1:   29-block  0
        -:   30:        }
        -:   31:        else {
    #####:   32:            printf("ERROR: operator must be a valid operation");
    %%%%%:   32-block  0
call    0 never executed
    #####:   33:            return 2;
        -:   34:        }
        4:   35:        fprintf(fp_write, "%c %.2f\n", operator,result);
        4:   35-block  0
call    0 returned 4
        -:   36:    }
        1:   37:    fclose(fp_read);
        1:   37-block  0
call    0 returned 1
        1:   38:    fclose(fp_write);
call    0 returned 1
        1:   39:    return 0;
        -:   40:}
